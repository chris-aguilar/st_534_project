---
title: "Data extraction from PDF"
format: html
editor: visual
---

## Intro

This is an attempt at extracting the energy usage and billing data from the pdf file for this project. 

## Import

The original pdf is created from a scan. So it's really an image inside a pdf. As such, we import to an image format first. The `{magick}` package helps us do this.

```{r import}
library(magick)
energy <- image_read_pdf("AEP_power_use_data_redacted.pdf")

print(energy)
```

We see both pages are imported and turned into PNG format.

## Data prep

Looking at the preview, we see we're interested in the columns `Read Date`, `KWH Usage`, and `Amount`. So we'll take the images and trim them to capture only those columns. That result will be passed through an OCR implementation to extract the relevant text from the images.

The pages are just a little off on each scan so we have to crop them manually for the data we care about.

The following cropping is done through trial-and-error based on the examples in this [vignette](https://cran.r-project.org/web/packages/magick/vignettes/intro.html#Transformations):

```{r image prep}
first_pg <- energy[1] |>
  image_crop("1650x2575 + 200 + 525")

first_pg

second_pg <- energy[2] |>
  image_crop("1650x2000 + 200 + 480")

second_pg
```

Now we convert these images into text with OCR using the `{tesseract}` package. Then we'll use the `{readr}` package to convert the text into data frames and we'll combine those data frames with `dplyr`. Once that's done, we'll rename columns appropriately and convert data types for analysis. For that we'll need packages `{stringr}` for manipulating text data, and `{lubridate}` for working with dates easily.

```{r create data frames}
#| warning: false

library(readr)
library(dplyr)
library(tesseract)
library(stringr)
library(lubridate)

# dataframe from first page
table1 <- ocr(first_pg) |>
  read_table()

# dataframe from second page
table2 <- ocr(second_pg) |>
  read_table()


energy_data <- table1 |>
  union(table2) |> # stacking dataframes using union
  rename(date = Read,
         kwh = Date,
         cost = Usage) |> # renaming appropriately since ocr not perfect
  filter(!is.na(cost)) |> # non-missing cost values capture relevant data
  mutate(date = mdy(date),
         kwh = str_remove(kwh, ",") |> as.integer(),
         cost = str_remove_all(cost, "\\$|,") |> as.numeric()) |>
  select(date, kwh, cost)

# viewing first and last 7 data points to sanity check
head(energy_data, 7)
tail(energy_data, 7)
```

## Data export

Since it looks like our conversion from pdf figures to time series data worked, we'll export for analysis!

```{r data export}

write_csv(energy_data, "energy_data.csv")
```

